from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import pandas as pd

def volatility_adjusted_forecast():
    # Load data with market indicators
    data = pd.read_csv('market_data.csv', parse_dates=['date'])
    
    # Feature engineering
    data['7d_ma'] = data['demand'].rolling(7).mean()
    data['14d_volatility'] = data['demand'].rolling(14).std()
    data = data.dropna()
    
    # Split data with recent bias
    X = data[['7d_ma', '14d_volatility', 'market_index']]
    y = data['demand']
    X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)
    
    # Train model
    model = RandomForestRegressor(n_estimators=100, min_samples_split=10)
    model.fit(X_train, y_train)
    
    # Generate predictions
    return model.predict(X_test)

volatility_aware_predictions = volatility_adjusted_forecast()
