import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt

# -------------------------------
# 1. Input Parameters
# -------------------------------
mean_daily_demand = 500
std_daily_demand = 80
lead_time_days = 10
desired_service_level = 0.95  # 95% service level
forecast_error_std = 60  # std dev of forecast error

# -------------------------------
# 2. Z-score for Desired Service Level
# -------------------------------
z_value = stats.norm.ppf(desired_service_level)

# -------------------------------
# 3. Time Period Correction Factor
#    (since safety stock needs to be scaled for lead time)
# -------------------------------
time_correction = np.sqrt(lead_time_days)

# -------------------------------
# 4. Safety Stock Calculation
# -------------------------------
safety_stock = z_value * std_daily_demand * time_correction

# -------------------------------
# 5. Probability of Stockout
# -------------------------------
stockout_probability = 1 - desired_service_level

# -------------------------------
# 6. Forecast Error Distribution Visualization
# -------------------------------
x = np.linspace(-3*forecast_error_std, 3*forecast_error_std, 1000)
pdf = stats.norm.pdf(x, loc=0, scale=forecast_error_std)

plt.figure(figsize=(8, 4))
plt.plot(x, pdf, label='Forecast Error Distribution')
plt.title('Forecast Error Distribution (Normal)')
plt.xlabel('Forecast Error')
plt.ylabel('Probability Density')
plt.grid(True)
plt.legend()
plt.show()

# -------------------------------
# 7. Daily Demand Distribution
# -------------------------------
x_demand = np.linspace(mean_daily_demand - 4*std_daily_demand,
                       mean_daily_demand + 4*std_daily_demand, 1000)
pdf_demand = stats.norm.pdf(x_demand, mean_daily_demand, std_daily_demand)

plt.figure(figsize=(8, 4))
plt.plot(x_demand, pdf_demand, label='Daily Demand Distribution')
plt.title('Daily Demand Distribution (Normal)')
plt.xlabel('Units')
plt.ylabel('Probability Density')
plt.grid(True)
plt.legend()
plt.show()

# -------------------------------
# 8. ABC Analysis
# -------------------------------
# Example dataset: [Item, Annual Demand (units), Unit Cost]
data = [
    ["A", 1000, 50],
    ["B", 3000, 10],
    ["C", 100, 100],
    ["D", 500, 25],
    ["E", 2000, 15],
    ["F", 1500, 20],
]

df = pd.DataFrame(data, columns=["Item", "AnnualDemand", "UnitCost"])
df["AnnualConsumptionValue"] = df["AnnualDemand"] * df["UnitCost"]
df = df.sort_values("AnnualConsumptionValue", ascending=False)
df["Cumulative%"] = 100 * df["AnnualConsumptionValue"].cumsum() / df["AnnualConsumptionValue"].sum()

# Assign ABC category
def classify(row):
    if row["Cumulative%"] <= 80:
        return "A"
    elif row["Cumulative%"] <= 95:
        return "B"
    else:
        return "C"

df["ABC_Category"] = df.apply(classify, axis=1)

# Display ABC Analysis Result
print("\n--- ABC Analysis Result ---")
print(df)

# -------------------------------
# 9. Summary Output
# -------------------------------
print("\n--- Summary ---")
print(f"Desired Customer Service Level: {desired_service_level * 100:.1f}%")
print(f"Z-value: {z_value:.2f}")
print(f"Time Period Correction Factor (sqrt of lead time): {time_correction:.2f}")
print(f"Safety Stock: {safety_stock:.0f} units")
print(f"Stockout Probability: {stockout_probability:.2%}")
