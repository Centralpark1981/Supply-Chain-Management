import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

def monte_carlo_safety_stock_with_contrast(
    daily_demand_samples,
    lead_time_days,
    service_level=0.95,
    n_sim=1000,
    alpha=0.05,  # Nivel de significancia para el contraste
    show_histogram=True
):
    """
    Simulación Monte Carlo con Teoría de Contrastes (Hipótesis Nula sobre la normalidad).
    """

    # 1. Simular demanda total durante el lead time
    lead_time_demands = [
        np.sum(np.random.choice(daily_demand_samples, size=lead_time_days))
        for _ in range(n_sim)
    ]

    # 2. Estadísticos descriptivos
    mean_demand = np.mean(lead_time_demands)
    std_demand = np.std(lead_time_demands)
    safety_stock = np.percentile(lead_time_demands, service_level * 100) - mean_demand

    # 3. Teoría de Contrastes: KS Test para normalidad
    ks_stat, p_value = stats.kstest(lead_time_demands, 'norm', args=(mean_demand, std_demand))
    reject_null = p_value < alpha

    # 4. Visualización
    if show_histogram:
        plt.figure(figsize=(10, 6))
        plt.hist(lead_time_demands, bins=30, color='skyblue', edgecolor='black', density=True, label="Distribución Simulada")
        
        # Superponer distribución normal teórica
        x = np.linspace(min(lead_time_demands), max(lead_time_demands), 500)
        plt.plot(x, stats.norm.pdf(x, mean_demand, std_demand), 'r--', label='Normal Teórica')
        
        plt.axvline(mean_demand + safety_stock, color='green', linestyle=':', label=f'P({service_level*100:.0f}%)')
        plt.title('Distribución de la Demanda Total en el Lead Time')
        plt.xlabel('Demanda Total')
        plt.ylabel('Densidad')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    # 5. Resultados con interpretación del contraste
    print("\n--- Resultados de la Simulación y Contraste ---")
    print(f"Media de la demanda: {mean_demand:.2f}")
    print(f"Desviación estándar: {std_demand:.2f}")
    print(f"Nivel de servicio deseado: {service_level:.2%}")
    print(f"Stock de seguridad estimado: {safety_stock:.2f} unidades")
    print(f"\n--- Contraste de Hipótesis (KS Test) ---")
    print(f"H₀: La distribución es normal")
    print(f"H₁: La distribución no es normal")
    print(f"Estadístico KS: {ks_stat:.4f}")
    print(f"Valor-p: {p_value:.4f}")
    print(f"Nivel de significancia α: {alpha}")
    print(f"¿Se rechaza H₀? {'Sí' if reject_null else 'No'}")

    return round(safety_stock, 2), not reject_null


# --- Ejemplo de uso ---
if __name__ == "__main__":
    demanda_diaria = [45, 38, 52, 41, 49, 60, 40, 55, 48, 50]
    tiempo_de_entrega = 7
    nivel_servicio = 0.95
    simulaciones = 1000
    alpha = 0.05

    ss, sigue_normal = monte_carlo_safety_stock_with_contrast(
        daily_demand_samples=demanda_diaria,
        lead_time_days=tiempo_de_entrega,
        service_level=nivel_servicio,
        n_sim=simulaciones,
        alpha=alpha,
        show_histogram=True
    )

    print(f"\n¿La distribución puede considerarse normal?: {'Sí' if sigue_normal else 'No'}")
