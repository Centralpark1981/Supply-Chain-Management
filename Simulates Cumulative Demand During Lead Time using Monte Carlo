import numpy as np
import plotly.graph_objects as go
from scipy import stats

def monte_carlo_safety_stock_plotly(
    daily_demand_samples,
    lead_time_days,
    service_level=0.95,
    n_sim=500
):
    # Simulaciones
    lead_time_demands = [
        np.sum(np.random.choice(daily_demand_samples, size=lead_time_days))
        for _ in range(n_sim)
    ]

    min_demand = min(daily_demand_samples) * lead_time_days
    max_demand = max(daily_demand_samples) * lead_time_days
    bins = np.arange(min_demand, max_demand + max(daily_demand_samples) + 1, 1)

    frames = []
    for i in range(1, n_sim + 1, max(1, n_sim // 50)):  # Limit to ~50 steps
        current_data = lead_time_demands[:i]
        hist, bin_edges = np.histogram(current_data, bins=bins)
        frames.append(go.Frame(
            data=[go.Bar(x=bin_edges[:-1], y=hist)],
            name=f"Sim {i}"
        ))

    # Layout
    layout = go.Layout(
        title="Monte Carlo Simulation of Demand Over Lead Time",
        xaxis=dict(title="Total Demand over Lead Time"),
        yaxis=dict(title="Frequency"),
        updatemenus=[dict(
            type="buttons",
            showactive=False,
            buttons=[dict(label="Play", method="animate", args=[None])]
        )],
        sliders=[dict(
            steps=[dict(method="animate", args=[[f.name]], label=f.name) for f in frames],
            transition=dict(duration=0),
            x=0, y=0, currentvalue=dict(prefix="Simulation: ")
        )]
    )

    fig = go.Figure(
        data=[go.Bar(x=bins[:-1], y=np.zeros_like(bins[:-1]))],
        layout=layout,
        frames=frames
    )

    fig.show()

    # Calcular safety stock
    sorted_data = np.sort(lead_time_demands)
    demand_at_service_level = np.percentile(sorted_data, service_level * 100)
    mean_demand = np.mean(lead_time_demands)
    safety_stock = demand_at_service_level - mean_demand

    # Normalidad
    if len(lead_time_demands) > 1 and np.std(lead_time_demands) > 0:
        ks_stat, p_value = stats.kstest(lead_time_demands, 'norm', args=(mean_demand, np.std(lead_time_demands)))
        is_normal = p_value > 0.05
    else:
        is_normal = False

    return round(safety_stock, 2), is_normal


# --- Ejemplo de uso ---
if __name__ == "__main__":
    demand_samples = [45, 38, 52, 41, 49, 60, 40, 55, 48, 50]
    lead_time_days = 7
    service_level = 0.95
    n_sim = 1000

    stock, is_normal = monte_carlo_safety_stock_plotly(
        daily_demand_samples=demand_samples,
        lead_time_days=lead_time_days,
        service_level=service_level,
        n_sim=n_sim
    )

    print("\n--- Resultados ---")
    print(f"Safety Stock: {stock}")
    print(f"Distribución aproximadamente normal: {'Sí' if is_normal else 'No'}")
