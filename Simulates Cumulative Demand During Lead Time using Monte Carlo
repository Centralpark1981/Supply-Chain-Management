import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

def monte_carlo_safety_stock(daily_demand_samples, lead_time_days, service_level=0.95, n_sim=10000):
    """Calculate safety stock using Monte Carlo simulation with optional animated plot"""
    lead_time_demands = []

    # Create a figure for animation
    fig, ax = plt.subplots()
    ax.set_title("Monte Carlo Simulation of Demand During Lead Time")
    ax.set_xlabel("Demand")
    ax.set_ylabel("Frequency")
    # Determine appropriate bins based on potential range of demands
    min_demand = min(daily_demand_samples) * lead_time_days
    max_demand = max(daily_demand_samples) * lead_time_days
    bins = np.arange(min_demand, max_demand + 2, 1) # Include max_demand in bins

    # Initialize bar container with zeros for all bins
    hist_data, _ = np.histogram([], bins=bins)
    bar_container = ax.bar(bins[:-1], hist_data, width=1.0, align='edge', color='skyblue')


    def update(frame):
        if frame < n_sim:
            demand = np.sum(np.random.choice(daily_demand_samples, size=lead_time_days))
            lead_time_demands.append(demand) # Append demand to the list
            hist_data, _ = np.histogram(lead_time_demands, bins=bins)
            for count, bar in zip(hist_data, bar_container):
                bar.set_height(count)
        return bar_container

    ani = FuncAnimation(fig, update, frames=n_sim, repeat=False, interval=1, blit=False)

    plt.tight_layout()
    plt.show()

    # Generate all simulation samples after the animation is set up
    simulated_demands = []
    for _ in range(n_sim):
        simulated_demands.append(np.sum(np.random.choice(daily_demand_samples, size=lead_time_days)))


    # After simulation completes
    safety_stock = np.percentile(simulated_demands, service_level*100) - np.mean(simulated_demands)
    ks_stat, p_value = stats.kstest(simulated_demands, 'norm')
    is_normal = p_value > 0.05

    return round(safety_stock, 2), is_normal

# Usage
demand_samples = [45, 38, 52, 41, 49, 60]
safety_stock, normal_check = monte_carlo_safety_stock(demand_samples, lead_time_days=7, service_level=0.95)
print(f"Safety Stock: {safety_stock} | Normal Distribution? {normal_check}")
