import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, FFMpegWriter
from scipy import stats

def monte_carlo_safety_stock_with_animation(
    daily_demand_samples,
    lead_time_days,
    service_level=0.95,
    n_sim=500,
    show=True,
    save_path=None
):
    """
    Monte Carlo Simulation with animated histogram for Safety Stock estimation.
    Can show or save the animation.
    """
    # Populate lead_time_demands for final calculation
    lead_time_demands = [np.sum(np.random.choice(daily_demand_samples, size=lead_time_days)) for _ in range(n_sim)]

    bins = np.arange(
        min(daily_demand_samples) * lead_time_days,
        max(daily_demand_samples) * lead_time_days + 2,
        1
    )

    fig, ax = plt.subplots(figsize=(8, 5))
    ax.set_title("Monte Carlo Simulation - Demand During Lead Time")
    ax.set_xlabel("Total Demand over Lead Time")
    ax.set_ylabel("Frequency")
    ax.set_xlim(bins[0], bins[-1])
    ax.set_ylim(0, n_sim // 10) # Adjust ylim as needed
    bars = ax.bar(bins[:-1], np.zeros_like(bins[:-1]), width=1.0, align='edge', color='skyblue')

    # This list is just for the animation
    animation_demands = []
    def update(frame):
        demand = np.sum(np.random.choice(daily_demand_samples, size=lead_time_days))
        animation_demands.append(demand)
        hist, _ = np.histogram(animation_demands, bins=bins)
        for count, bar in zip(hist, bars):
            bar.set_height(count)
        return bars


    if show or save_path: # Only create animation object if needed
        anim = FuncAnimation(fig, update, frames=n_sim, repeat=False, blit=False, interval=10)


    if save_path:
        writer = FFMpegWriter(fps=30)
        anim.save(save_path, writer=writer)
        print(f"Animation saved to {save_path}")
        plt.close(fig)
    elif show:
        plt.tight_layout()
        plt.show()
    else:
        plt.close(fig) # Close the figure if not showing or saving


    # Final safety stock calculation using the populated list
    safety_stock = np.percentile(lead_time_demands, service_level * 100) - np.mean(lead_time_demands)
    ks_stat, p_value = stats.kstest(lead_time_demands, 'norm')
    is_normal = p_value > 0.05

    return round(safety_stock, 2), is_normal

# === Sample Run ===
demand_samples = [45, 38, 52, 41, 49, 60]

# Show animation (set save_path to save as MP4 instead)
safety_stock, normal_dist_check = monte_carlo_safety_stock_with_animation(
    daily_demand_samples=demand_samples,
    lead_time_days=7,
    service_level=0.95,
    n_sim=500,
    show=True,                  # Show on screen
    save_path=None              # Or set to "output.mp4" to save
)

print(f"\nSafety Stock: {safety_stock}")
print(f"Follows Normal Distribution? {'Yes' if normal_dist_check else 'No'}")
